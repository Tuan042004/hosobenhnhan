/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Nhung;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author ADMIN
 */
public class phongbenh extends javax.swing.JInternalFrame {

    /**
     */
    public phongbenh() {
        initComponents();
        load_Pb();
    }
    //tải dữ liệu cho bảng
        private void load_Pb(){
         try {
             TbPhong.removeAll(); //xóa dl cũ 
        Connection con = BTL.Connect.KetnoiDB();
        String sql = "SELECT * FROM PhongBenh";
        Statement st = con.createStatement(); 
        ResultSet rs = st.executeQuery(sql); 
        String[] tieude = {"Mã phòng","Tên khoa","Loại Phòng","Số giường", "Trạng thái"};
        DefaultTableModel tb = new DefaultTableModel(tieude, 0);
        while (rs.next()) {
            Vector<String> v = new Vector<>();
            v.add(rs.getString("MaPhong")); 
            v.add(rs.getString("TenKhoa")); 
            v.add(rs.getString("LoaiPhong")); 
            v.add(rs.getString("SoGiuong")); 
            v.add(rs.getString("TrangThai"));
            tb.addRow(v); 
        }
        TbPhong.setModel(tb); 
        con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tk_mp = new javax.swing.JTextField();
        timkiem = new javax.swing.JButton();
        themmoi = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tenk = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        map = new javax.swing.JTextField();
        loaip = new javax.swing.JTextField();
        ttp = new javax.swing.JTextField();
        soGiuong = new javax.swing.JTextField();
        xuatex = new javax.swing.JButton();
        nhapex = new javax.swing.JButton();
        thoát = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbPhong = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(980, 600));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("QUẢN LÝ PHÒNG BỆNH");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel2.setText("Mã phòng:");

        tk_mp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tk_mpKeyReleased(evt);
            }
        });

        timkiem.setText("Tìm Kiếm");
        timkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timkiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tk_mp)
                .addGap(18, 18, 18)
                .addComponent(timkiem)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tk_mp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timkiem))
                .addGap(5, 5, 5))
        );

        themmoi.setText("Thêm mới");
        themmoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themmoiActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel3.setText("Mã phòng:");

        jLabel4.setText("Tên Khoa:");

        jLabel5.setText("Loại phòng:");

        tenk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Nhập tên Khoa --", "Khoa Nội", "Khoa Ngoại", "Khoa Nhi", "Khoa Sản", "Khoa Cấp cứu", "Khoa Da liễu", "Khoa Tim mạch", "Khoa Hô hấp", "Khoa Thần kinh", "Khoa Xét nghiệm", "Khoa Chẩn đoán hình ảnh", "Khoa Phục hồi chức năng", "Khoa Dinh dưỡng", "Khoa Y học cổ truyền", "Khoa Tâm lý" }));

        jLabel16.setText("Số giường:");

        jLabel17.setText("Trạng thái:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(ttp))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(map)
                            .addComponent(loaip))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tenk, 0, 183, Short.MAX_VALUE)
                            .addComponent(soGiuong))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(tenk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(map, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel16)
                    .addComponent(loaip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soGiuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(ttp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        xuatex.setText("Xuất Excel");
        xuatex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatexActionPerformed(evt);
            }
        });

        nhapex.setText("Nhập Excel");
        nhapex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapexActionPerformed(evt);
            }
        });

        thoát.setText("Thoát");
        thoát.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thoátActionPerformed(evt);
            }
        });

        TbPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã Phòng", "Tên Khoa", "Loại Phòng", "Số Giường", "Trạng thái"
            }
        ));
        TbPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TbPhongMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TbPhong);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(themmoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(xuatex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nhapex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(thoát))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(212, 212, 212)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(7, 7, 7)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(themmoi)
                    .addComponent(xuatex)
                    .addComponent(nhapex)
                    .addComponent(thoát)
                    .addComponent(refresh))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Connection con;
    private void tk_mpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tk_mpKeyReleased
        try {
            String mp = tk_mp.getText().trim();
            con = BTL.Connect.KetnoiDB();
            Statement st = con.createStatement();
            String sql = "SELECT * FROM PhongBenh WHERE MaPhong LIKE '%" + mp + "%'";
            // Thực hiện truy vấn
            ResultSet rs = st.executeQuery(sql);
            String[] tieude = {"Mã phòng","Tên khoa","Loại Phòng","Số giường", "Trạng thái"};
            DefaultTableModel tb = new DefaultTableModel(tieude, 0);
            // Duyệt qua kết quả và thêm vào bảng
            while (rs.next()) {
                Vector<String> v = new Vector<>();
                v.add(rs.getString("MaPhong"));
                v.add(rs.getString("TenKhoa"));
                v.add(rs.getString("LoaiPhong"));
                v.add(rs.getString("SoGiuong"));
                v.add(rs.getString("TrangThai"));
                tb.addRow(v);
            }
            TbPhong.setModel(tb);
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tìm kiếm không thành công");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(phongbenh.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tk_mpKeyReleased

    private void timkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timkiemActionPerformed
        String maPhong = tk_mp.getText().trim();
        if (maPhong.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã phòng!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            try {
                con = BTL.Connect.KetnoiDB();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(phongbenh.class.getName()).log(Level.SEVERE, null, ex);
            }
            String checkMaPhongSQL = "SELECT MaPhong, TenKhoa, LoaiPhong, SoGiuong, TrangThai FROM PhongBenh WHERE MaPhong = ?";
            pst = con.prepareStatement(checkMaPhongSQL);
            pst.setString(1, maPhong);
            rs = pst.executeQuery(); 
            if (rs.next()) {
                // Lấy dữ liệu từ ResultSet
                String tenKhoa = rs.getString("TenKhoa");
                String loaiPhong = rs.getString("LoaiPhong");
                int soGiuongDB = rs.getInt("SoGiuong");
                String trangThai = rs.getString("TrangThai");
                // Hiển thị dữ liệu lên các trường
                map.setText(maPhong); 
                tenk.setSelectedItem(tenKhoa); 
                loaip.setText(loaiPhong); 
                soGiuong.setText(String.valueOf(soGiuongDB)); 
                ttp.setText(trangThai); 
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy phòng với mã phòng đã nhập!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi SQL: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_timkiemActionPerformed

    private void themmoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themmoiActionPerformed
        // TODO add your handling code here:
        themphong them = new themphong();
        them.setVisible(true);
    }//GEN-LAST:event_themmoiActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        load_Pb();
        map.setEnabled(true);  // Đảm bảo có thể nhập Mã phòng
        map.setText("");
        tenk.setSelectedItem("-- Nhập tên Khoa --");
        loaip.setText("");
        soGiuong.setText("");
        ttp.setText("");
    }//GEN-LAST:event_refreshActionPerformed
    private static CellStyle DinhDangHeader(XSSFSheet sheet){
        // Tạo font
       XSSFFont font = sheet.getWorkbook().createFont();
       font.setFontName("Times New Roman");
       font.setBold(true);
       font.setFontHeightInPoints((short) 12); // kích thước font
       font.setColor(IndexedColors.WHITE.getIndex()); // màu chữ

       // Tạo CellStyle
       CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
       cellStyle.setFont(font);
       cellStyle.setAlignment(HorizontalAlignment.CENTER);
       cellStyle.setVerticalAlignment(VerticalAlignment.TOP);

       cellStyle.setFillForegroundColor(IndexedColors.DARK_GREEN.getIndex());
       cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
       cellStyle.setBorderBottom(BorderStyle.THIN);
       cellStyle.setWrapText(true);

       return cellStyle;
    }
    private void xuatexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatexActionPerformed
        //khai báo các biến
        Connection con = null; 
        PreparedStatement st = null; 
        ResultSet rs = null; 

        try {
            // Tạo workbook và sheet
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Khoa");

            // Tạo tiêu đề cho bảng
            XSSFRow row = spreadsheet.createRow(2); // Dòng thứ 3 (chỉ số 2)
            Cell cell = row.createCell(0);
            cell.setCellValue("DANH SÁCH PHÒNG BỆNH");

            // Tạo dòng tiêu đề cột
            CellStyle cellStyle_Head = DinhDangHeader(spreadsheet);
            row = spreadsheet.createRow(3); // Dòng thứ 4 (chỉ số 3)

            // Thiết lập các tiêu đề cột
            cell = row.createCell(0);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Mã Phòng");

            cell = row.createCell(1);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Tên Khoa");

            cell = row.createCell(2);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Loại Phòng");

            cell = row.createCell(3);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Số Giường");

            cell = row.createCell(4);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Trạng Thái");
            // Kết nối đến cơ sở dữ liệu
            con = BTL.Connect.KetnoiDB();
            if (con == null) {
                System.out.println("Kết nối đến cơ sở dữ liệu thất bại.");
                return;
            }
            String sql = "SELECT * FROM PhongBenh";
            // Thay đổi PreparedStatement
            st = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery();

            // Kiểm tra có dữ liệu trả về
            if (!rs.next()) {
                System.out.println("Không có dữ liệu nào để xuất.");
                return;
            }
            // Trở về đầu ResultSet
            rs.beforeFirst();
            // Đổ dữ liệu từ ResultSet vào các ô trong Excel
            ResultSetMetaData rsmd = rs.getMetaData();
            int tongsocot = rsmd.getColumnCount();

            // Định dạng ô chứa dữ liệu
            CellStyle cellStyle_data = spreadsheet.getWorkbook().createCellStyle();
            cellStyle_data.setBorderLeft(BorderStyle.THIN);
            cellStyle_data.setBorderRight(BorderStyle.THIN);
            cellStyle_data.setBorderBottom(BorderStyle.THIN);

            int i = 0;
            while (rs.next()) {
                row = spreadsheet.createRow(4 + i); // Bắt đầu từ dòng 5

                // Điền dữ liệu vào các ô
                cell = row.createCell(0);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("MaPhong"));

                cell = row.createCell(1);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("TenKhoa"));

                cell = row.createCell(2);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("LoaiPhong"));

                cell = row.createCell(3);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("SoGiuong"));

                cell = row.createCell(4);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("TrangThai"));

                i++;
            }

            // Hiệu chỉnh độ rộng của cột
            for (int col = 0; col < tongsocot; col++) {
                spreadsheet.autoSizeColumn(col);
            }

            // Xuất file Excel
            File f = new File("D:\\BTVN JAVA\\BTL\\src\\main\\java\\PhongVaGiuong\\DanhSachPhongBenh.xlsx");
            FileOutputStream out = new FileOutputStream(f);
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace(); // In ra lỗi nếu có
        } finally {
            // Đóng các đối tượng liên quan trong khối finally
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_xuatexActionPerformed
    private void ReadExcel(String tenFilepath){
        try {
           // Sử dụng tenFilepath đã được truyền vào phương thức
           FileInputStream fis = new FileInputStream(tenFilepath);
           XSSFWorkbook wb = new XSSFWorkbook(fis);
           XSSFSheet sheet = wb.getSheetAt(0); // Lấy sheet đầu tiên
           Iterator<Row> itr = sheet.iterator();
           int row_count = 0;

           while (itr.hasNext()) {
               Row row = itr.next();
               if (row_count > 0) { // Bỏ qua dòng tiêu đề
                   String map = "";
                   Cell cell1 = row.getCell(0);
                   if (cell1 != null) {
                       if (cell1.getCellType() == CellType.STRING) {
                           map = cell1.getStringCellValue().trim();
                       } else if (cell1.getCellType() == CellType.NUMERIC) {
                           map = String.valueOf((int) cell1.getNumericCellValue());
                       }
                   }

                   if (map.isEmpty()) {
                       row_count++;
                       continue; // Bỏ qua dòng này
                   }

                   String tk = "";
                   Cell cell2 = row.getCell(1);
                   if (cell2 != null) {
                       if (cell2.getCellType() == CellType.STRING) {
                           tk = cell2.getStringCellValue().trim();
                       } else if (cell2.getCellType() == CellType.NUMERIC) {
                           tk = String.valueOf((int) cell2.getNumericCellValue()).trim(); // Chuyển kiểu số thành chuỗi
                       }
                   }

                   String lp = "";
                   Cell cell3 = row.getCell(2);
                   if (cell3 != null) {
                       if (cell3.getCellType() == CellType.STRING) {
                           lp = cell3.getStringCellValue().trim();
                       } else if (cell3.getCellType() == CellType.NUMERIC) {
                           lp = String.valueOf((int) cell3.getNumericCellValue()).trim(); // Chuyển kiểu số thành chuỗi
                       }
                   }

                   String sg = "";
                   Cell cell4 = row.getCell(3);
                   if (cell4 != null) {
                       if (cell4.getCellType() == CellType.STRING) {
                           sg = cell4.getStringCellValue().trim();
                       } else if (cell4.getCellType() == CellType.NUMERIC) {
                           sg = String.valueOf((int) cell4.getNumericCellValue()).trim(); // Chuyển kiểu số thành chuỗi
                       }
                   }

                   String tt = "";
                   Cell cell5 = row.getCell(4);
                   if (cell5 != null) {
                       if (cell5.getCellType() == CellType.STRING) {
                           tt = cell5.getStringCellValue().trim();
                       } else if (cell5.getCellType() == CellType.NUMERIC) {
                           tt = String.valueOf((int) cell5.getNumericCellValue()).trim(); // Chuyển kiểu số thành chuỗi
                       }
                   }

                   // Gọi phương thức thêm giường bệnh
                   Themmoipb(map, tk, lp, sg, tt);
               }
               row_count++;
           }
           JOptionPane.showMessageDialog(this, "Thêm giường bệnh bằng file thành công");
           load_Pb();
       } catch (Exception e) {
           JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm giường bệnh: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
           e.printStackTrace(); // Vẫn in stack trace ra console để kiểm tra
       }
    }
    private void nhapexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapexActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fc = new JFileChooser();
            int lc = fc.showOpenDialog(this);
            if (lc == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                String tenfile = file.getName();
                if (tenfile.endsWith(".xlsx")) { // Kiểm tra file có đuôi .xlsx
                    ReadExcel(file.getPath());
                } else {
                    JOptionPane.showMessageDialog(this, "Phải chọn file excel có định dạng .xlsx", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Không có file nào được chọn", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi mở file: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); 
        }
    }//GEN-LAST:event_nhapexActionPerformed

    private void thoátActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thoátActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, 
        "Bạn có chắc chắn muốn thoát không?", 
        "Xác nhận thoát", 
        JOptionPane.OK_CANCEL_OPTION, 
        JOptionPane.QUESTION_MESSAGE);

        // Kiểm tra kết quả xác nhận
        if (confirm == JOptionPane.OK_OPTION) {
            this.dispose();
        } else {
            // Hộp thoại đóng và không thoát
        }
    }//GEN-LAST:event_thoátActionPerformed

    private void TbPhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbPhongMouseClicked
        // TODO add your handling code here:
        int i = TbPhong.getSelectedRow();
        if (i == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một mã phòng để xem thông tin!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) TbPhong.getModel();
        Object maPValue = model.getValueAt(i, 0);
        Object tkValue = model.getValueAt(i, 1);
        Object lpValue = model.getValueAt(i, 2);
        Object sgPValue = model.getValueAt(i, 3);
        Object ttValue = model.getValueAt(i, 4);

        tenk.setSelectedItem(tkValue != null ? tkValue.toString() : null);
        loaip.setText(lpValue != null ? lpValue.toString() : "");
        soGiuong.setText(sgPValue != null ? sgPValue.toString() : "");
        map.setText(maPValue != null ? maPValue.toString() : "");
        ttp.setText(ttValue != null ? ttValue.toString() : null);
        map.setEnabled(false); // Vô hiệu hóa JTextField nếu cần
    }//GEN-LAST:event_TbPhongMouseClicked
        public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(phongbenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(phongbenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(phongbenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(phongbenh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new phongbenh().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TbPhong;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField loaip;
    private javax.swing.JTextField map;
    private javax.swing.JButton nhapex;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField soGiuong;
    private javax.swing.JComboBox<String> tenk;
    private javax.swing.JButton themmoi;
    private javax.swing.JButton thoát;
    private javax.swing.JButton timkiem;
    private javax.swing.JTextField tk_mp;
    private javax.swing.JTextField ttp;
    private javax.swing.JButton xuatex;
    // End of variables declaration//GEN-END:variables

    private void Themmoipb(String map, String tk, String lp, String sg, String tt) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void addWindowListener(WindowAdapter windowAdapter) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
