/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package QuanLyBenhNhan;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author ADMIN
 */
public class QuanLyChanDoan extends javax.swing.JFrame {

    /**
     * Creates new form QuanLyChanDoan
     */
    public QuanLyChanDoan() {
        initComponents();
        load_CD();
    }
    private void load_CD(){
        try {
             tbCD.removeAll(); 
        Connection con = conDB.ketnoidb();
        String sql = "SELECT * FROM ChanDoan";
        Statement st = con.createStatement(); 
        ResultSet rs = st.executeQuery(sql); 
        String[] tieude = {"Mã chẩn đoán", "Mã bệnh nhân", "Ngày chẩn đoán", "Chẩn đoán chi tiết","Bác sĩ chẩn đoán"};
        DefaultTableModel tb = new DefaultTableModel(tieude, 0);

        while (rs.next()) {
            Vector<String> v = new Vector<>();
            v.add(rs.getString("MaChanDoan")); 
            v.add(rs.getString("MaBenhNhan")); 
            v.add(rs.getDate("NgayChanDoan") != null ? rs.getDate("NgayChanDoan").toString() : ""); // Ngày nhập viện
            v.add(rs.getString("ChanDoanChiTiet"));
            v.add(rs.getString("BacSiChanDoan")); 
            tb.addRow(v); 
        }
        tbCD.setModel(tb); 
        con.close(); 
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        xoa = new javax.swing.JButton();
        thoat = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tk_mcd = new javax.swing.JTextField();
        timkiem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        mcd = new javax.swing.JTextField();
        mbn = new javax.swing.JTextField();
        bs = new javax.swing.JTextField();
        ct = new javax.swing.JTextField();
        n = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCD = new javax.swing.JTable();
        them = new javax.swing.JButton();
        capnhat = new javax.swing.JButton();
        xuatExcel = new javax.swing.JButton();
        readExcel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        xoa.setText("Xóa");
        xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaActionPerformed(evt);
            }
        });

        thoat.setText("Thoát");
        thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thoatActionPerformed(evt);
            }
        });

        jLabel1.setText("QUẢN LÝ CHẨN ĐOÁN");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel2.setText("Mã chẩn đoán:");

        tk_mcd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tk_mcdActionPerformed(evt);
            }
        });
        tk_mcd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tk_mcdKeyReleased(evt);
            }
        });

        timkiem.setText("Tìm kiếm");
        timkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timkiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(tk_mcd, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tk_mcd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timkiem))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel3.setText("Mã chẩn đoán:");

        jLabel4.setText("Mã bệnh nhân:");

        jLabel5.setText("Ngày chẩn đoán:");

        jLabel6.setText("Bác sĩ:");

        jLabel7.setText("Chẩn đoán chi tiết:");

        n.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(bs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(mbn, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mcd, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 245, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ct, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mcd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(mbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(bs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tbCD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã chẩn đoán", "Mã bệnh nhân", "Ngày chẩn đoán", "Chẩn đoán chi tiết", "Bác sĩ chẩn đoán"
            }
        ));
        tbCD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCDMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbCD);

        them.setText("Thêm");
        them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themActionPerformed(evt);
            }
        });

        capnhat.setText("Cập nhật");
        capnhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capnhatActionPerformed(evt);
            }
        });

        xuatExcel.setText("Xuất Excel");
        xuatExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatExcelActionPerformed(evt);
            }
        });

        readExcel.setText("Nhập Excel");
        readExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(them)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(capnhat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(xoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(xuatExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(thoat))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(them)
                    .addComponent(capnhat)
                    .addComponent(xoa)
                    .addComponent(thoat)
                    .addComponent(xuatExcel)
                    .addComponent(readExcel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Connection con;
    private void xoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaActionPerformed
     String macd = mcd.getText().trim();
    
    // Kiểm tra xem mã hồ sơ có được nhập hay không
    if (macd.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập mã chẩn đoán để xóa!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    Connection con = null;
    PreparedStatement deleteStmt = null;

    try {
        con = conDB.ketnoidb();

        // Tạo câu lệnh SQL để xóa
        String sql = "DELETE FROM ChanDoan WHERE MaChanDoan = ?";
        deleteStmt = con.prepareStatement(sql);
        deleteStmt.setString(1, macd);

        // Thực thi câu lệnh xóa
        int rowsDeleted = deleteStmt.executeUpdate();

        // Kiểm tra nếu xóa thành công
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Hồ sơ đã được xóa thành công!");
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy hồ sơ với mã CD đã cho!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }

        // Tải lại dữ liệu
        load_CD();
        mcd.setText("");
        mbn.setText("");
        n.setDate(null);
        bs.setText("");
        ct.setText("");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi SQL: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Đóng kết nối và tài nguyên
        try {
            if (deleteStmt != null) deleteStmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_xoaActionPerformed
    private void xoatrang(){
        mcd.setText("");
        mbn.setText("");
        n.setDate(null);
        bs.setText("");
        ct.setText("");

    }
    private void timkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timkiemActionPerformed
        // TODO add your handling code here:
            String searchTerm = tk_mcd.getText().trim(); // Lấy mã chẩn đoán từ JTextField

       if (searchTerm.isEmpty()) {
           JOptionPane.showMessageDialog(this, "Vui lòng nhập mã chẩn đoán để tìm kiếm!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
           return; // Dừng lại nếu mã chẩn đoán trống
       }

       Connection con = null;
       PreparedStatement pst = null;
       ResultSet rs = null;

       try {
           con = conDB.ketnoidb(); // Kết nối cơ sở dữ liệu
           String sql = "SELECT * FROM ChanDoan WHERE MaChanDoan = ?"; // Câu lệnh SQL tìm theo MaChanDoan
           pst = con.prepareStatement(sql);
           pst.setString(1, searchTerm); // Đưa mã chẩn đoán vào câu truy vấn

           rs = pst.executeQuery(); // Thực hiện câu truy vấn

           if (rs.next()) {
               mcd.setText(rs.getString("MaChanDoan")); // Hiển thị mã chẩn đoán
               mbn.setText(rs.getString("MaBenhNhan"));  // Hiển thị mã bệnh nhân
               Date ngayChanDoan = rs.getDate("NgayChanDoan"); // Hiển thị ngày chẩn đoán
               if (ngayChanDoan != null) {
                   n.setDate(ngayChanDoan);
               }
               ct.setText(rs.getString("ChanDoanChiTiet")); // Hiển thị chẩn đoán chi tiết
               bs.setText(rs.getString("BacSiChanDoan")); // Hiển thị bác sĩ chẩn đoán
           } else {
               JOptionPane.showMessageDialog(this, "Không tìm thấy hồ sơ với mã CD đã cho!", "Thông báo", JOptionPane.WARNING_MESSAGE);
           }
       } catch (SQLException e) {
           e.printStackTrace();
           JOptionPane.showMessageDialog(this, "Lỗi SQL: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
       } catch (Exception e) {
           e.printStackTrace();
           JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
       } finally {
           // Đóng các tài nguyên (ResultSet, PreparedStatement, Connection)
           try {
               if (rs != null) rs.close();
               if (pst != null) pst.close();
               if (con != null) con.close();
           } catch (SQLException e) {
               e.printStackTrace();
           }
       }
    }//GEN-LAST:event_timkiemActionPerformed

    private void tbCDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCDMouseClicked
        // TODO add your handling code here:
        int i = tbCD.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbCD.getModel();
        if (i != -1) {
            mcd.setText(model.getValueAt(i, 0).toString());
            mbn.setText(model.getValueAt(i, 1).toString());

            String ngay = model.getValueAt(i, 2).toString();
            java.util.Date ngaysinh;
            try {
                ngaysinh = new SimpleDateFormat("yyyy-MM-dd").parse(ngay);
                n.setDate(ngaysinh); // giữ tên biến của JDateChooser là 'n'
            } catch (Exception e) {
                e.printStackTrace();
            }

            ct.setText(model.getValueAt(i, 3).toString());
            bs.setText(model.getValueAt(i, 4).toString());

            mcd.setEnabled(false); // vô hiệu hóa trường MaChanDoan
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hồ sơ để xem thông tin!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_tbCDMouseClicked

    private void themActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themActionPerformed
        // TODO add your handling code here:
        String macd = mcd.getText().trim();
        String mabn = mbn.getText().trim();
        Date ngay= new Date(n.getDate().getTime());
        String bsi = bs.getText().trim();
        String cdct = ct.getText().trim();
        
        // B1.1: Kiểm tra các trường bắt buộc phải nhập
        if (macd.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã chuẩn đoán không được để trống.");
            mcd.requestFocus();  
            return;
        }

        if (mabn.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã bệnh nhân không được để trống.");
            mbn.requestFocus();
            return;
        }

        if (ngay == null) {
            JOptionPane.showMessageDialog(this, "Ngày không được để trống.");
            n.requestFocus();  
            return;
        }

        if (cdct.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Chẩn đoán chi tiết không được để trống.");
            ct.requestFocus();  
            return;
        }

        if (bsi.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bác sĩ không được để trống.");
            bs.requestFocus();  
            return;
        }

        
        try {
            con = conDB.ketnoidb();
            // Kiểm tra xem kết nối có null không
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Không thể kết nối đến cơ sở dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return; // Thoát khỏi phương thức nếu không kết nối được
            }
            String sql = "INSERT INTO ChanDoan "
            + "VALUES ('"+ macd +"','" + mabn + "', '" + ngay + "', '" + bsi + "', '" + cdct + "')";
            // Tạo Statement
            Statement st = con.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "Hồ sơ chan doan đã được thêm thành công!");
            st.close();
            con.close();
            load_CD();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_themActionPerformed

    private void capnhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capnhatActionPerformed
    String macd = mcd.getText().trim();
    String mabn = mbn.getText().trim();
    java.util.Date utilDate = n.getDate(); // Lấy giá trị ngày từ JDateChooser
    if (macd.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Phải nhập mã chẩn đoán!");
        return;
    }
    if (mabn.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Phải nhập mã bệnh nhân!");
        return;
    }
    if (utilDate == null) {
        JOptionPane.showMessageDialog(this, "Phải nhập ngày chẩn đoán!");
        return;
    }
    java.sql.Date ngay = new java.sql.Date(utilDate.getTime()); // Chuyển đổi sang java.sql.Date
    String bsi = bs.getText().trim();
    if (bsi.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Phải nhập bác sĩ chẩn đoán!");
        return;
    }
    String cdct = ct.getText().trim();
    if (cdct.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Phải nhập chẩn đoán chi tiết!");
        return;
    }

    try {
        con = conDB.ketnoidb();
        String sql = "UPDATE ChanDoan SET " +
                     "MaBenhNhan = ?, " +
                     "NgayChanDoan = ?, " +
                     "ChanDoanChiTiet = ?, " +
                     "BacSiChanDoan = ? " +
                     "WHERE MaChanDoan = ?";
        
        // Sử dụng PreparedStatement để tránh SQL Injection
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, mabn);
            pstmt.setDate(2, ngay); // Sử dụng java.sql.Date
            pstmt.setString(3, cdct);
            pstmt.setString(4, bsi);
            pstmt.setString(5, macd);
            
            int rowsUpdated = pstmt.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Hồ sơ chẩn đoán đã được cập nhật thành công!");
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy hồ sơ với mã chẩn đoán đã cho!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        }
        
        load_CD(); // Gọi phương thức để tải lại dữ liệu
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Cập nhật không thành công: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Đảm bảo đóng kết nối nếu nó chưa được đóng
        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    }//GEN-LAST:event_capnhatActionPerformed

    private void tk_mcdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tk_mcdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tk_mcdActionPerformed

    
    private void tk_mcdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tk_mcdKeyReleased
        // TODO add your handling code here:
        try {
             String mcd = tk_mcd.getText().trim(); 

        // Kết nối đến cơ sở dữ liệu
        con = conDB.ketnoidb();
        Statement st = con.createStatement();

        // Xây dựng câu lệnh SQL cho tìm kiếm
        String sql = "SELECT * FROM ChanDoan WHERE MaChanDoan LIKE '%" + mcd + "%'";

        // Thực hiện truy vấn
        ResultSet rs = st.executeQuery(sql);
        String[] tieude = {"Mã chẩn đoán", "Mã bệnh nhân", "Ngày chẩn đoán", "Chẩn đoán chi tiết","Bác sĩ chẩn đoán"};
        DefaultTableModel tb = new DefaultTableModel(tieude, 0);

        // Duyệt qua kết quả và thêm vào bảng
        while (rs.next()) {
            Vector<String> v = new Vector<>();
            v.add(rs.getString("MaChanDoan"));         
            v.add(rs.getString("MaBenhNhan"));        
            v.add(rs.getString("NgayChanDoan"));       
            v.add(rs.getString("BacSiChanDoan"));   
            v.add(rs.getString("ChanDoanChiTiet"));  
            tb.addRow(v);
        }

        // Gán model mới cho bảng
        tbCD.setModel(tb);

        // Đóng kết nối
        con.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tìm kiếm không thành công");

        }
    }//GEN-LAST:event_tk_mcdKeyReleased
    
   private static CellStyle DinhDangHeader(XSSFSheet sheet){
     // Tạo font
    XSSFFont font = sheet.getWorkbook().createFont();
    font.setFontName("Times New Roman");
    font.setBold(true);
    font.setFontHeightInPoints((short) 12); // kích thước font
    font.setColor(IndexedColors.WHITE.getIndex()); // màu chữ

    // Tạo CellStyle
    CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
    cellStyle.setFont(font);
    cellStyle.setAlignment(HorizontalAlignment.CENTER);
    cellStyle.setVerticalAlignment(VerticalAlignment.TOP);

    cellStyle.setFillForegroundColor(IndexedColors.DARK_GREEN.getIndex());
    cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
    cellStyle.setBorderBottom(BorderStyle.THIN);
    cellStyle.setWrapText(true);

    return cellStyle;
 }

    private void xuatExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatExcelActionPerformed
        // TODO add your handling code here:
      try {
    // Tạo workbook và sheet
    XSSFWorkbook workbook = new XSSFWorkbook();
    XSSFSheet spreadsheet = workbook.createSheet("Khoa");

    // Tạo tiêu đề cho bảng
    XSSFRow row = spreadsheet.createRow(2); // Dòng thứ 3 (chỉ số 2)
    Cell cell = row.createCell(0);
    cell.setCellValue("DANH SÁCH CHẨN ĐOÁN");

    // Tạo dòng tiêu đề cột
    CellStyle cellStyle_Head = DinhDangHeader(spreadsheet);
    row = spreadsheet.createRow(3); // Dòng thứ 4 (chỉ số 3)
    
    // Thiết lập các tiêu đề cột
    String[] headers = {"Mã chẩn đoán", "Mã bệnh nhân", "Ngày chẩn đoán", "Chẩn đoán chi tiết","Bác sĩ chẩn đoán"};
    for (int i = 0; i < headers.length; i++) {
        cell = row.createCell(i);
        cell.setCellStyle(cellStyle_Head);
        cell.setCellValue(headers[i]);
    }

    // Kết nối đến cơ sở dữ liệu
    con = conDB.ketnoidb();
    String sql = "SELECT * FROM ChanDoan";
    
    // Thay đổi PreparedStatement
    PreparedStatement st = con.prepareStatement(sql, 
    ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    ResultSet rs = st.executeQuery();

    // Kiểm tra có dữ liệu trả về
    if (!rs.next()) {
        System.out.println("Không có dữ liệu nào để xuất.");
        return;
    }
    
    // Trở về đầu ResultSet
    rs.beforeFirst();

    // Đổ dữ liệu từ ResultSet vào các ô trong Excel
    ResultSetMetaData rsmd = rs.getMetaData();
    int tongsocot = rsmd.getColumnCount();

    // Định dạng ô chứa dữ liệu
    CellStyle cellStyle_data = workbook.createCellStyle();
    cellStyle_data.setBorderLeft(BorderStyle.THIN);
    cellStyle_data.setBorderRight(BorderStyle.THIN);
    cellStyle_data.setBorderBottom(BorderStyle.THIN);

    int i = 0;
    while (rs.next()) {
        row = spreadsheet.createRow(4 + i); // Bắt đầu từ dòng 5

        // Điền dữ liệu vào các ô
        for (int j = 1; j <= tongsocot; j++) {
            cell = row.createCell(j - 1);
            cell.setCellStyle(cellStyle_data);
            cell.setCellValue(rs.getString(j)); // Đổ dữ liệu từ ResultSet vào ô
        }
        i++;
    }

    // Hiệu chỉnh độ rộng của cột
    for (int col = 0; col < tongsocot; col++) {
        spreadsheet.autoSizeColumn(col);
    }

    // Xuất file Excel
    File f = new File("D:\\BTVN JAVA\\BTL\\src\\main\\java\\QuanLyBenhNhan\\DanhSachChanDoan.xlsx");
    FileOutputStream out = new FileOutputStream(f);
    workbook.write(out);
    out.close();
    
    // Đóng các đối tượng liên quan
    rs.close();
    st.close();
    con.close();  
} catch (Exception e) {
    e.printStackTrace(); // In ra lỗi
}

    }//GEN-LAST:event_xuatExcelActionPerformed
    private void ReadExcel(String tenFilepath){
        try {
            String tenfilepath = null;
            FileInputStream fis = new FileInputStream(tenfilepath);
            XSSFWorkbook wb = new XSSFWorkbook(fis);
            XSSFSheet sheet = wb.getSheetAt(0); // Lấy sheet đầu tiên
            Iterator<Row> itr = sheet.iterator();
            int row_count = 0;

            while (itr.hasNext()) {
                Row row = itr.next();
                if (row_count > 0) { // Bỏ qua dòng tiêu đề
                    String mcd = "";
                    Cell cell1 = row.getCell(0);
                    if (cell1 != null) {
                        if (cell1.getCellType() == CellType.STRING) {
                            mcd = cell1.getStringCellValue().trim();
                        } else if (cell1.getCellType() == CellType.NUMERIC) {
                            mcd = String.valueOf((int) cell1.getNumericCellValue());
                        }
                    }

                    // Kiểm tra xem mbn có phải là chuỗi rỗng không
                    if (mcd.isEmpty()) {
                        row_count++;
                        continue; // Bỏ qua dòng này
                    }

                    String mbn = "";
                    Cell cell2 = row.getCell(1);
                    if (cell2 != null) {
                        if (cell2.getCellType() == CellType.STRING) {
                            mbn = cell2.getStringCellValue().trim();
                        } else if (cell2.getCellType() == CellType.NUMERIC) {
                            mbn = String.valueOf(cell2.getNumericCellValue()).trim();
                        }
                    }

                    String ncd = "";
                    Cell cell3 = row.getCell(2);
                    if (cell3 != null) {
                        if (cell3.getCellType() == CellType.STRING) {
                            ncd = cell3.getStringCellValue().trim();
                        } else if (cell3.getCellType() == CellType.NUMERIC) {
                            ncd= new SimpleDateFormat("yyyy-MM-dd").format(cell3.getDateCellValue());
                        }
                    }

                    String cdct = "";
                    Cell cell4 = row.getCell(3);
                    if (cell4 != null) {
                        if (cell4.getCellType() == CellType.STRING) {
                            cdct = cell4.getStringCellValue().trim();
                        } else if (cell4.getCellType() == CellType.NUMERIC) {
                            cdct = String.valueOf(cell4.getNumericCellValue()).trim();
                        }
                    }

                    String bscd = "";
                    Cell cell5 = row.getCell(4);
                    if (cell5 != null) {
                        if (cell5.getCellType() == CellType.STRING) {
                            bscd = cell5.getStringCellValue().trim();
                        } else if (cell5.getCellType() == CellType.NUMERIC) {
                           bscd = String.valueOf(cell5.getNumericCellValue()).trim();
                        }
                    }

                   
                    // Gọi phương thức thêm bệnh nhân
                    Themchandoan(mcd, mbn, ncd, cdct, bscd);
                }
                row_count++;
            }
            JOptionPane.showMessageDialog(this, "Thêm bệnh nhân bằng file thành công");
            load_CD();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    private void readExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readExcelActionPerformed
        // TODO add your handling code here:
         try {
            JFileChooser fc = new JFileChooser();
            int lc = fc.showOpenDialog(this);
            if (lc == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                String tenfile = file.getName();
                if (tenfile.endsWith(".xlsx")) {    //endsWith chọn file có phần kết thúc ...
                    ReadExcel(file.getPath());
                } else {
                    JOptionPane.showMessageDialog(this, "Phải chọn file excel");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_readExcelActionPerformed

    private void thoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thoatActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_thoatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyChanDoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyChanDoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyChanDoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyChanDoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyChanDoan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bs;
    private javax.swing.JButton capnhat;
    private javax.swing.JTextField ct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mbn;
    private javax.swing.JTextField mcd;
    private com.toedter.calendar.JDateChooser n;
    private javax.swing.JButton readExcel;
    private javax.swing.JTable tbCD;
    private javax.swing.JButton them;
    private javax.swing.JButton thoat;
    private javax.swing.JButton timkiem;
    private javax.swing.JTextField tk_mcd;
    private javax.swing.JButton xoa;
    private javax.swing.JButton xuatExcel;
    // End of variables declaration//GEN-END:variables

    private void Themchandoan(String mcd, String mbn, String ncd, String cdct, String bscd) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
