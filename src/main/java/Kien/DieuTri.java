/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Kien;

import BTL.Connect;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class DieuTri extends javax.swing.JInternalFrame {

    /**
     * Creates new form DieuTri
     */
    public DieuTri() {
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        
        initComponents();
        load_cboBenhnhan();
        load_cboNhanvien();
        load_cboKhoa();
        load_cboThuoc();
        load_qtdt();
        txtKqbn.setEnabled(false);
        txtKqnv.setEnabled(false);
        txtKqk.setEnabled(false);
        txtKqt.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txtTimkiem = new javax.swing.JTextField();
        bttimkiem = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMadt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtcddt = new javax.swing.JTextField();
        dcngaydt = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        txtppdt = new javax.swing.JTextField();
        cboMabn = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtKqnv = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cboManv = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cboMakhoa = new javax.swing.JComboBox<>();
        cboMathuoc = new javax.swing.JComboBox<>();
        txtKqk = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtKqt = new javax.swing.JTextField();
        txtKqbn = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbQtdt = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btthem = new javax.swing.JButton();
        btsua = new javax.swing.JButton();
        btxoa = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnhapexcel = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(980, 600));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lý Quá Trình Điều Trị");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin tìm kiếm"));

        txtTimkiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTimkiemMouseClicked(evt);
            }
        });
        txtTimkiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimkiemKeyReleased(evt);
            }
        });

        bttimkiem.setText("Tìm kiếm");
        bttimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttimkiemActionPerformed(evt);
            }
        });

        jLabel8.setText("Thông tin Điều Trị");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(txtTimkiem)
                .addGap(18, 18, 18)
                .addComponent(bttimkiem)
                .addGap(14, 14, 14))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttimkiem)
                    .addComponent(jLabel8))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin chi tiết"));

        jLabel2.setText("Mã Bệnh Nhân");

        jLabel3.setText("Mã Điều Trị");

        jLabel5.setText("Ngày Điều Trị");

        jLabel6.setText("Chuẩn Đoán Điều Trị");

        dcngaydt.setDateFormatString("yyyy-MM-dd");

        jLabel7.setText("Phương Pháp Điều Trị");

        txtppdt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtppdtActionPerformed(evt);
            }
        });

        cboMabn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Mã Bệnh Nhân" }));
        cboMabn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMabnItemStateChanged(evt);
            }
        });
        cboMabn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMabnActionPerformed(evt);
            }
        });

        jLabel9.setText("Bác Sĩ Điều Trị");

        txtKqnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKqnvActionPerformed(evt);
            }
        });

        jLabel4.setText("Mã Nhân Viên");

        cboManv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Mã Nhân Viên" }));
        cboManv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboManvItemStateChanged(evt);
            }
        });
        cboManv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboManvActionPerformed(evt);
            }
        });

        jLabel11.setText("Mã Khoa");

        jLabel12.setText("Tên Khoa");

        jLabel13.setText("Mã Thuốc");

        cboMakhoa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Mã Khoa" }));
        cboMakhoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMakhoaItemStateChanged(evt);
            }
        });
        cboMakhoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMakhoaActionPerformed(evt);
            }
        });

        cboMathuoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Mã Thuốc" }));
        cboMathuoc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMathuocItemStateChanged(evt);
            }
        });
        cboMathuoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMathuocActionPerformed(evt);
            }
        });

        jLabel14.setText("Tên Thuốc");

        jLabel15.setText("Tên Bệnh Nhân");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboMabn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboManv, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtKqnv)
                    .addComponent(txtMadt))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtcddt)
                    .addComponent(txtppdt)
                    .addComponent(dcngaydt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboMakhoa, 0, 142, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtKqk, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(cboMathuoc, 0, 1, Short.MAX_VALUE)
                    .addComponent(txtKqt)
                    .addComponent(txtKqbn))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtMadt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(dcngaydt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(txtKqk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cboMabn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(cboMathuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtcddt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboManv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtppdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtKqt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtKqnv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(cboMakhoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtKqbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        tbQtdt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        tbQtdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbQtdtMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbQtdt);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btthem.setText("Thêm");
        btthem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btthemActionPerformed(evt);
            }
        });

        btsua.setText("Sửa");
        btsua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsuaActionPerformed(evt);
            }
        });

        btxoa.setText("Xóa");
        btxoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btxoaActionPerformed(evt);
            }
        });

        jButton4.setText("Xuất Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnhapexcel.setText("Nhập excel");
        btnhapexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapexcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btthem)
                .addGap(18, 18, 18)
                .addComponent(btsua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btxoa)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(btnhapexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLoad)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btthem)
                    .addComponent(btsua)
                    .addComponent(btxoa)
                    .addComponent(jButton4)
                    .addComponent(btnLoad)
                    .addComponent(btnhapexcel))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void load_qtdt(){
        try {
            tbQtdt.removeAll();
            //B1: Kết nối đến DB
            con= BTL.Connect.KetnoiDB();
            //B2: Tạo đối tượng Statement để thực hiện câu lệnh truy cập
            String sql = "Select * From QuaTrinhDieuTri";
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            String[] tieude={"Mã Điều Trị", "Họ Tên Bệnh Nhân","Bác Sĩ Điều Trị","Ngày Điều Trị","Chuẩn Đoán Điều Trị","Phương Pháp Điều Trị","Tên Khoa","Tên Thuốc"};
            DefaultTableModel tb=new DefaultTableModel(tieude,0)    {           
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        // Tất cả các ô sẽ không thể chỉnh sửa
                        return false;
                    }
                    };
            
            while(rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("MaDieutri"));
                v.add(rs.getString("HotenBenhnhan"));
                v.add(rs.getString("BacSiDieuTri"));
                v.add(rs.getString("NgayDieuTri"));
                v.add(rs.getString("ChanDoanDieuTri"));
                v.add(rs.getString("PhuongPhapDieuTri"));
                v.add(rs.getString("TenKhoa"));
                v.add(rs.getString("TenThuoc"));
                tb.addRow(v);
            }
            tbQtdt.setModel(tb);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
     public void xoatrang(){
            txtMadt.setText("");
            txtKqbn.setText("");
            txtKqnv.setText("");
            dcngaydt.setDate(null);
            txtcddt.setText("");
            txtppdt.setText("");
            txtKqk.setText("");
            txtKqt.setText("");
            cboMabn.setSelectedItem("Chọn Mã Bệnh Nhân");  //setSelectIndex(0)
            cboManv.setSelectedItem("Chọn Mã Nhân Viên");
            cboMakhoa.setSelectedItem("Chọn Mã Khoa");
            cboMathuoc.setSelectedItem("Chọn Mã Thuốc");
    }
     
     
    Connection con;
    Map<String,String> benhnhan = new HashMap<>();
    Map<String,String> nhanvien = new HashMap<>();
    Map<String,String> khoa = new HashMap<>();
    Map<String,String> thuoc = new HashMap<>();
    private void load_cboBenhnhan(){
        try{
            con = Connect.KetnoiDB();
            String sql = "Select * From BenhNhan";
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Đổ dữ liệu vào combobox
            while(rs.next()){
                cboMabn.addItem(rs.getString("MaBenhNhan"));
                benhnhan.put(rs.getString("MaBenhNhan"), rs.getString("HoTenBenhNhan"));
            }
            con.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    private void load_cboNhanvien(){
        try{
            con = Connect.KetnoiDB();
            String sql = "Select * From NhanVienYTe";
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Đổ dữ liệu vào combobox
            while(rs.next()){
                cboManv.addItem(rs.getString("MaNhanVien"));
                nhanvien.put(rs.getString("MaNhanVien"), rs.getString("BacSiDieuTri"));
            }
            con.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    private void load_cboKhoa(){
        try{
            con = Connect.KetnoiDB();
            String sql = "Select * From Khoa";
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Đổ dữ liệu vào combobox
            while(rs.next()){
                cboMakhoa.addItem(rs.getString("MaKhoa"));
                khoa.put(rs.getString("MaKhoa"), rs.getString("TenKhoa"));
            }
            con.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    private void load_cboThuoc(){
        try{
            con = Connect.KetnoiDB();
            String sql = "Select * From Thuoc";
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Đổ dữ liệu vào combobox
            while(rs.next()){
                cboMathuoc.addItem(rs.getString("MaThuoc"));
                thuoc.put(rs.getString("MaThuoc"), rs.getString("TenThuoc"));
            }
            con.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private void txtTimkiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimkiemMouseClicked
        xoatrang();
    }//GEN-LAST:event_txtTimkiemMouseClicked

    private void txtTimkiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimkiemKeyReleased
        //        try {
            //            // Lấy mã bệnh nhân từ trường nhập liệu
            //            tbKhoa.removeAll();
            //            String mbn = txtTimkiem.getText().trim();  // Mã bệnh nhân
            //
            //            // Kết nối đến cơ sở dữ liệu
            //            con = BTL.Connect.KetnoiDB(); //dm chó tuấn
            //            Statement st = con.createStatement();
            //
            //            // Xây dựng câu lệnh SQL cho tìm kiếm
            //            String sql = "SELECT * FROM QuaTrinhDieuTri WHERE MaBenhNhan LIKE '%" + mbn + "%'";
            //
            //            // Thực hiện truy vấn
            //            ResultSet rs = st.executeQuery(sql);
            //            String[] tieude = {"Mã điều trị", "Mã bệnh nhân", "Ngày điều trị", "Chẩn đoán điều trị", "Phương pháp điều trị", "Bác sĩ điều trị"};
            //            DefaultTableModel tb = new DefaultTableModel(tieude, 0);
            //            tb.setRowCount(0);
            //
            //            // Duyệt qua kết quả và thêm vào bảng
            //            while (rs.next()) {
                //                Vector<String> v = new Vector<>();
                //                v.add(rs.getString("MaDieuTri"));          // Mã điều trị
                //                v.add(rs.getString("MaBenhNhan"));         // Mã bệnh nhân
                //                v.add(rs.getString("NgayDieuTri"));        // Ngày điều trị
                //                v.add(rs.getString("ChanDoanDieuTri"));    // Chẩn đoán điều trị
                //                v.add(rs.getString("PhuongPhapDieuTri"));  // Phương pháp điều trị
                //                v.add(rs.getString("BacSiDieuTri"));       // Bác sĩ điều trị
                //                tb.addRow(v);
                //            }
            //
            //            // Cập nhật bảng hiển thị
            //            tbKhoa.setModel(tb);
            //            con.close();  // Đóng kết nối
            //        } catch (Exception e) {
            //            e.printStackTrace();
            //            JOptionPane.showMessageDialog(this, "Tìm kiếm không thành công");
            //        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimkiemKeyReleased

    private void bttimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttimkiemActionPerformed
        try{
            //lấy dữ liệu từ compoment đưa vài biến
            String tk = txtTimkiem.getText().trim();
            con = BTL.Connect.KetnoiDB();
            String sql = "Select * From QuaTrinhDieuTri Where MaDieuTri like'%"+tk+"%'"; //and HoTenBenhNhan like N'%"+tk+"%' and BacSiDieuTri like N'%"+tk+"%' and ChanDoanDieuTri like N'%"+tk+"%' and PhuongPhapDieuTri like N'%"+tk+"%'"; 
            Statement st=con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            String[] tieude={"Mã Điều Trị", "Họ Tên Bệnh Nhân","Bác Sĩ Điều Trị","Ngày Điều Trị","Chuẩn Đoán Điều Trị","Phương Pháp Điều Trị","Tên Khoa","Tên Thuốc"};
            DefaultTableModel tb=new DefaultTableModel(tieude,0)    {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // Tất cả các ô sẽ không thể chỉnh sửa
                    return false;
                }
            };

            while(rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("MaDieutri"));
                v.add(rs.getString("HotenBenhnhan"));
                v.add(rs.getString("BacSiDieuTri"));
                v.add(rs.getString("NgayDieuTri"));
                v.add(rs.getString("ChanDoanDieuTri"));
                v.add(rs.getString("PhuongPhapDieuTri"));
                v.add(rs.getString("TenKhoa"));
                v.add(rs.getString("TenThuoc"));
                tb.addRow(v);
            }
            tbQtdt.setModel(tb);
            con.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bttimkiemActionPerformed

    private void txtppdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtppdtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtppdtActionPerformed

    private void cboMabnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMabnItemStateChanged
        // TODO add your handling code here:
        String ten = cboMabn.getSelectedItem().toString();
        txtKqbn.setText(benhnhan.get(ten));
    }//GEN-LAST:event_cboMabnItemStateChanged

    private void cboMabnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMabnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMabnActionPerformed

    private void txtKqnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKqnvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKqnvActionPerformed

    private void cboManvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboManvItemStateChanged
        // TODO add your handling code here:
        String ten = cboManv.getSelectedItem().toString();
        txtKqnv.setText(nhanvien.get(ten));
    }//GEN-LAST:event_cboManvItemStateChanged

    private void cboManvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboManvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboManvActionPerformed

    private void cboMakhoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMakhoaItemStateChanged
        // TODO add your handling code here:
        String ten = cboMakhoa.getSelectedItem().toString();
        txtKqk.setText(khoa.get(ten));
    }//GEN-LAST:event_cboMakhoaItemStateChanged

    private void cboMakhoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMakhoaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMakhoaActionPerformed

    private void cboMathuocItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMathuocItemStateChanged
        // TODO add your handling code here:
        String ten = cboMathuoc.getSelectedItem().toString();
        txtKqt.setText(thuoc.get(ten));
    }//GEN-LAST:event_cboMathuocItemStateChanged

    private void cboMathuocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMathuocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMathuocActionPerformed

    private void tbQtdtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbQtdtMouseClicked
        int i = tbQtdt.getSelectedRow();
        DefaultTableModel tb = (DefaultTableModel)tbQtdt.getModel();
        txtMadt.setText(tb.getValueAt(i, 0).toString());
        txtKqbn.setText(tb.getValueAt(i, 1).toString());
        txtKqnv.setText(tb.getValueAt(i, 2).toString());
        String ngay = tb.getValueAt(i, 3).toString();
        java.util.Date ngs;
        try{
            ngs = new SimpleDateFormat("yyyy-MM-dd").parse(ngay);
            dcngaydt.setDate(ngs);

        }catch (Exception ex){
            ex.printStackTrace();
        }
        txtcddt.setText(tb.getValueAt(i, 4).toString());
        txtppdt.setText(tb.getValueAt(i, 5).toString());
        txtKqk.setText(tb.getValueAt(i, 6).toString());
        txtKqt.setText(tb.getValueAt(i, 7).toString());
        txtMadt.setEnabled(false);
    }//GEN-LAST:event_tbQtdtMouseClicked

    private void btthemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btthemActionPerformed
        // B1: lấy dữ liệu các compents đưa vào biến
        String ma = txtMadt.getText().trim();
        String ten = txtKqbn.getText().trim();
        String bs = txtKqnv.getText().trim();
        SimpleDateFormat fomat = new SimpleDateFormat("yyyy-MM-dd");
        String cd = txtcddt.getText().trim();
        String pp = txtppdt.getText().trim();
        String khoa = txtKqk.getText().trim();
        String thuoc = txtKqt.getText().trim();
        // B1.1: Kiểm tra các trường bắt buộc phải nhập
        if (ma.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã điều trị không được để trống.");
            txtMadt.requestFocus();
            return;
        }
        //        if(ten.equals("Chọn Mã Bệnh Nhân")){
            //            ten="";
            //        }

        if (ten.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên bệnh nhân không được để trống.");
            txtKqbn.requestFocus();
            return;
        }

        if (bs.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên bác sĩ không được để trống.");
            txtKqnv.requestFocus();
            return;
        }

        Date ndt = null;
        try {
            ndt = new Date(dcngaydt.getDate().getTime());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Phải nhập ngày điều trị hợp lệ!");
            dcngaydt.requestFocus();
            return;
        }
        if (ndt == null) {
            JOptionPane.showMessageDialog(this, "Ngày điều trị không được để trống.");
            dcngaydt.requestFocus();
            return;
        }

        if (cd.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Chuẩn đoán điều trị không được để trống.");
            txtcddt.requestFocus();
            return;
        }

        if (pp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phương pháp điều trị không được để trống.");
            txtppdt.requestFocus();
            return;
        }

        if (khoa.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Khoa không được để trống.");
            txtKqk.requestFocus();
            return;
        }

        if (thuoc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Thuốc không được để trống.");
            txtKqt.requestFocus();
            return;
        }

        //B2: Kết nối Database
        try {
            Connection con = BTL.Connect.KetnoiDB();

            //B3: Tạo đối tượng Statement để thực hiện lệnh truy vấn
            String sql = "Insert INTO QuaTrinhDieuTri values('"+ ma +"', N'"+ ten +"', N'"+ bs +"', '"+ ndt +"', N'"+ cd +"', N'"+ pp +"', N'"+ khoa +"', N'"+ thuoc +"')";
            Statement st = con.createStatement();
            st.executeUpdate(sql);
            con.close();
            load_qtdt();
            JOptionPane.showMessageDialog(this, "Thêm mới thành công");
            xoatrang();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm dữ liệu: " + e.getMessage());
        }
    }//GEN-LAST:event_btthemActionPerformed

    private void btsuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsuaActionPerformed
        try{
            String ma = txtMadt.getText();
            if(ma.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập mã dt!");
                return;
            }
            String ten = txtKqbn.getText();
            //            if(ten.equals("Chọn Mã Bệnh Nhân")){
                //                ten="";
                //            }
            if(ten.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập tên bn!");
                return;
            }
            String bs = txtKqnv.getText();
            if(ma.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập tên bs!");
                return;
            }

            Date ndt = null;
            try {
                ndt = new Date(dcngaydt.getDate().getTime());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Phải nhập ngày điều trị hợp lệ!");
                dcngaydt.requestFocus();
                return;
            }
            if (ndt == null) {
                JOptionPane.showMessageDialog(this, "Ngày điều trị không được để trống.");
                dcngaydt.requestFocus();
                return;
            }

            // Định dạng ngày điều trị thành kiểu chuỗi
            java.sql.Date sqlDate = new java.sql.Date(ndt.getTime());

            String cd = txtcddt.getText();
            if(cd.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập chuẩn đoán điều trị!");
                return;
            }

            String pp = txtppdt.getText();
            if(pp.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập pp điều trị!");
                return;
            }

            String khoa = txtKqk.getText();
            if(khoa.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập khoa!");
                return;
            }
            String thuoc = txtKqt.getText();
            if(thuoc.isEmpty()){
                JOptionPane.showMessageDialog(this, "Phải nhập thuốc!");
                return;
            }

            con = BTL.Connect.KetnoiDB();
            String sql = "Update QuaTrinhDieuTri Set HoTenBenhNhan=N'"+ten+"',BacSiDieuTri=N'"+bs+"',NgayDieuTri='"+ndt+"',ChanDoanDieuTri=N'"+cd+"',PhuongPhapDieuTri=N'"+pp+"',TenKhoa=N'"+khoa+"',TenThuoc=N'"+thuoc+"' Where MaDieuTri='"+ma+"'";
            Statement st = con.createStatement();
            st.executeUpdate(sql);
            con.close();
            JOptionPane.showMessageDialog(this, "Sửa thành công");
            load_qtdt();
            xoatrang();

        }catch (Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Sửa ko thành công");
        }
    }//GEN-LAST:event_btsuaActionPerformed

    private void btxoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btxoaActionPerformed
        try{
            String ma = txtMadt.getText();
            int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xoá không?", "Xác nhận", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (choice == JOptionPane.YES_OPTION) {
                con = BTL.Connect.KetnoiDB();
                String sql = "Delete From QuaTrinhDieuTri Where MaDieuTri='"+ma+"'";
                Statement st = con.createStatement();
                st.executeUpdate(sql);
                con.close();
                JOptionPane.showMessageDialog(this, "Xoá thành công");
                load_qtdt();
                xoatrang();
            } else {
                JOptionPane.showMessageDialog(this, "Không xoá nữa thì thôi");
            }
        }catch (Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btxoaActionPerformed

    private static CellStyle DinhdangHeader(XSSFSheet sheet) {
        // Create font
        Font font = sheet.getWorkbook().createFont();
        font.setFontName("Times New Roman");
        font.setBold(true);
        font.setFontHeightInPoints((short) 12); // font size
        font.setColor(IndexedColors.WHITE.getIndex()); // text color

        // Create CellStyle
        CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
        cellStyle.setFont(font);
        cellStyle.setAlignment(HorizontalAlignment.CENTER);
        cellStyle.setVerticalAlignment(VerticalAlignment.TOP);
        cellStyle.setFillForegroundColor(IndexedColors.DARK_GREEN.getIndex());
        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        cellStyle.setBorderBottom(BorderStyle.THIN);
        cellStyle.setWrapText(true);
        return cellStyle;
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Quá trình điều trị");
            // register the columns you wish to track and compute the column width

            CreationHelper createHelper = workbook.getCreationHelper();

            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH QUÁ TRÌNH ĐIỀU TRỊ");

            //Tạo dòng tiêu đều của bảng
            // create CellStyle
            CellStyle cellStyle_Head = DinhdangHeader(spreadsheet);
            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("STT");

            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Mã Điều Trị");

            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Tên Bệnh Nhân");

            cell = row.createCell(3, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Tên Bác Sĩ");

            cell = row.createCell(4, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Ngày Điều Trị");

            cell = row.createCell(5, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Chuẩn Đoán Điều Trị");

            cell = row.createCell(6, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Phương Pháp Điều Trị");

            cell = row.createCell(7, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Tên Khoa");

            cell = row.createCell(8, CellType.STRING);
            cell.setCellStyle(cellStyle_Head);
            cell.setCellValue("Tên Thuốc");

            //Kết nối DB
            con = BTL.Connect.KetnoiDB();
            String sql = "Select * From QuaTrinhDieuTri";
            PreparedStatement st = con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            //Đổ dữ liệu từ rs vào các ô trong excel
            ResultSetMetaData rsmd = rs.getMetaData();
            int tongsocot = rsmd.getColumnCount();

            //Đinh dạng Tạo đường kẻ cho ô chứa dữ liệu
            CellStyle cellStyle_data = spreadsheet.getWorkbook().createCellStyle();
            cellStyle_data.setBorderLeft(BorderStyle.THIN);
            cellStyle_data.setBorderRight(BorderStyle.THIN);
            cellStyle_data.setBorderBottom(BorderStyle.THIN);

            int i = 0;
            while (rs.next()) {
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short) 400);

                cell = row.createCell(0);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(i + 1);

                cell = row.createCell(1);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("MaDieuTri"));

                cell = row.createCell(2);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("HoTenBenhNhan"));

                cell = row.createCell(3);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("BacSiDieuTri"));

                //Định dạng ngày tháng trong excel
                java.util.Date ngay = new java.util.Date(rs.getDate("NgayDieuTri").getTime());
                CellStyle cellStyle = workbook.createCellStyle();
                cellStyle.setDataFormat(createHelper.createDataFormat().getFormat("yyyy-MM-dd"));
                cellStyle.setBorderLeft(BorderStyle.THIN);
                cellStyle.setBorderRight(BorderStyle.THIN);
                cellStyle.setBorderBottom(BorderStyle.THIN);
                cell = row.createCell(4);
                cell.setCellValue(ngay);
                cell.setCellStyle(cellStyle);

                cell = row.createCell(5);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("ChanDoanDieuTri"));

                cell = row.createCell(6);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("PhuongPhapDieuTri"));

                cell = row.createCell(7);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("TenKhoa"));

                cell = row.createCell(8);
                cell.setCellStyle(cellStyle_data);
                cell.setCellValue(rs.getString("TenThuoc"));

                i++;
            }
            //Hiệu chỉnh độ rộng của cột
            for (int col = 0; col < tongsocot; col++) {
                spreadsheet.autoSizeColumn(col);
            }

            File f = new File("C:\\Users\\Admin\\Documents\\NetBeansProjects\\hosobenhnhan\\src\\main\\java\\Kien\\Quatrinhdieutri.xlsx");
            FileOutputStream out = new FileOutputStream(f);
            workbook.write(out);
            out.close();
            JOptionPane.showMessageDialog(this, "Xuất Excel thành công!!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Xuất Excel ko thành công!!");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        txtMadt.setEnabled(true);
    }//GEN-LAST:event_btnLoadActionPerformed

    private void Them(String ma, String ten, String bs, String ndt, String cd, String pp, String khoa, String thuoc) {
    try {
        con = BTL.Connect.KetnoiDB();
        String sql = "INSERT INTO QuaTrinhDieuTri (MaDieuTri, HoTenBenhNhan, BacSiDieuTri, NgayDieuTri, ChanDoanDieuTri, PhuongPhapDieuTri, TenKhoa, TenThuoc) "
                   + "VALUES ('" + ma + "', N'" + ten + "',N'" + bs + "', '" + ndt + "', N'" + cd + "', N'" + pp + "', N'" + khoa + "', N'" + thuoc + "')";

        Statement st = con.createStatement();
        st.executeUpdate(sql);
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
    
    private void ReadExcel(String tenfilepath) {
        try {
        FileInputStream fis = new FileInputStream(tenfilepath);
        XSSFWorkbook wb = new XSSFWorkbook(fis);
        XSSFSheet sheet = wb.getSheetAt(0); // Lấy sheet đầu tiên
        Iterator<Row> itr = sheet.iterator();
        int row_count = 0;

        while (itr.hasNext()) {
            Row row = itr.next();
            if (row_count > 0) { // Bỏ qua dòng tiêu đề
                String ma = "";
                Cell cell1 = row.getCell(0);
                if (cell1 != null) {
                    if (cell1.getCellType() == CellType.STRING) {
                        ma = cell1.getStringCellValue().trim();
                    } else if (cell1.getCellType() == CellType.NUMERIC) {
                        ma = String.valueOf((int) cell1.getNumericCellValue());
                    }
                }

                // Kiểm tra xem mbn có phải là chuỗi rỗng không
                if (ma.isEmpty()) {
                    row_count++;
                    continue; // Bỏ qua dòng này
                }

                String ten = "";
                Cell cell2 = row.getCell(1);
                if (cell2 != null) {
                    if (cell2.getCellType() == CellType.STRING) {
                        ten = cell2.getStringCellValue().trim();
                    } else if (cell2.getCellType() == CellType.NUMERIC) {
                        ten = String.valueOf(cell2.getNumericCellValue()).trim();
                    }
                }
                
                String bs = "";
                Cell cell3 = row.getCell(2);
                if (cell3 != null) {
                    if (cell3.getCellType() == CellType.STRING) {
                        bs = cell3.getStringCellValue().trim();
                    } else if (cell3.getCellType() == CellType.NUMERIC) {
                        bs = String.valueOf(cell3.getNumericCellValue()).trim();
                    }
                }

                String ndt = "";
                Cell cell4= row.getCell(3);
                if (cell3 != null) {
                    if (cell4.getCellType() == CellType.STRING) {
                        ndt = cell4.getStringCellValue().trim();
                    } else if (cell4.getCellType() == CellType.NUMERIC) {
                        ndt = new SimpleDateFormat("yyyy-MM-dd").format(cell4.getDateCellValue());
                    }
                }

                String cd = "";
                Cell cell5 = row.getCell(4);
                if (cell5 != null) {
                    if (cell5.getCellType() == CellType.STRING) {
                        cd = cell5.getStringCellValue().trim();
                    } else if (cell5.getCellType() == CellType.NUMERIC) {
                        cd = String.valueOf(cell5.getNumericCellValue()).trim();
                    }
                }
                
                String pp = "";
                Cell cell6 = row.getCell(5);
                if (cell6 != null) {
                    if (cell6.getCellType() == CellType.STRING) {
                        pp = cell6.getStringCellValue().trim();
                    } else if (cell6.getCellType() == CellType.NUMERIC) {
                        pp = String.valueOf(cell6.getNumericCellValue()).trim();
                    }
                }
                
                String khoa = "";
                Cell cell7 = row.getCell(6);
                if (cell7 != null) {
                    if (cell7.getCellType() == CellType.STRING) {
                        khoa = cell7.getStringCellValue().trim();
                    } else if (cell7.getCellType() == CellType.NUMERIC) {
                        khoa = String.valueOf(cell7.getNumericCellValue()).trim();
                    }
                }
                
                String thuoc = "";
                Cell cell8 = row.getCell(7);
                if (cell8 != null) {
                    if (cell8.getCellType() == CellType.STRING) {
                        thuoc = cell8.getStringCellValue().trim();
                    } else if (cell8.getCellType() == CellType.NUMERIC) {
                        thuoc = String.valueOf(cell8.getNumericCellValue()).trim();
                    }
                }

                // Gọi phương thức thêm bệnh nhân
                Them(ma, ten, bs, ndt, cd, pp, khoa, thuoc);
            }
            row_count++;
        }
        JOptionPane.showMessageDialog(this, "Thêm bằng file thành công");
        load_qtdt();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }

    private void btnhapexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapexcelActionPerformed

        try {
            JFileChooser fc = new JFileChooser();
            int lc = fc.showOpenDialog(this);
            if (lc == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();

                String tenfile = file.getName();
                if (tenfile.endsWith(".xlsx")) {    //endsWith chọn file có phần kết thúc ...
                    ReadExcel(file.getPath());
                } else {
                    JOptionPane.showMessageDialog(this, "Phải chọn file excel");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnhapexcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnhapexcel;
    private javax.swing.JButton btsua;
    private javax.swing.JButton btthem;
    private javax.swing.JButton bttimkiem;
    private javax.swing.JButton btxoa;
    private javax.swing.JComboBox<String> cboMabn;
    private javax.swing.JComboBox<String> cboMakhoa;
    private javax.swing.JComboBox<String> cboManv;
    private javax.swing.JComboBox<String> cboMathuoc;
    private com.toedter.calendar.JDateChooser dcngaydt;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbQtdt;
    private javax.swing.JTextField txtKqbn;
    private javax.swing.JTextField txtKqk;
    private javax.swing.JTextField txtKqnv;
    private javax.swing.JTextField txtKqt;
    private javax.swing.JTextField txtMadt;
    private javax.swing.JTextField txtTimkiem;
    private javax.swing.JTextField txtcddt;
    private javax.swing.JTextField txtppdt;
    // End of variables declaration//GEN-END:variables
}
